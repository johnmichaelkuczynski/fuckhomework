import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Loader2, Send, FileText, Printer } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { useMutation } from "@tanstack/react-query";

export default function HomeworkAssistant() {
  const [inputText, setInputText] = useState("");
  const [selectedProvider, setSelectedProvider] = useState("anthropic");
  const [currentResult, setCurrentResult] = useState<any>(null);
  const [solutionAiScore, setSolutionAiScore] = useState<number | null>(null);
  const [isAnalyzingSolution, setIsAnalyzingSolution] = useState(false);
  const { toast } = useToast();

  const textMutation = useMutation({
    mutationFn: async ({ text, provider }: { text: string; provider: string }) => {
      const response = await fetch('/api/process-text', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          inputText: text, 
          inputType: 'text',
          llmProvider: provider 
        }),
      });
      if (!response.ok) throw new Error('Failed to process text');
      return response.json();
    },
    onSuccess: (data) => {
      setCurrentResult(data);
      // Automatically analyze AI detection for the solution
      if (data.llmResponse) {
        analyzeSolutionAI(data.llmResponse);
      }
      toast({
        title: "Assignment processed successfully",
        description: `Solution generated by ${selectedProvider}`,
      });
    },
    onError: (error: any) => {
      toast({
        title: "Processing failed",
        description: error.message || "Failed to process assignment",
        variant: "destructive",
      });
    },
  });

  const handleProcessText = () => {
    if (!inputText.trim()) {
      toast({
        title: "No content to process",
        description: "Please enter some text",
        variant: "destructive",
      });
      return;
    }
    textMutation.mutate({ text: inputText, provider: selectedProvider });
  };

  const handlePrint = () => {
    if (!currentResult) return;
    window.print();
  };

  // AI detection function for homework solutions
  const analyzeSolutionAI = async (text: string) => {
    if (!text.trim()) return;
    
    try {
      setIsAnalyzingSolution(true);
      const response = await fetch('/api/humanize/analyze', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ text }),
      });
      
      if (!response.ok) {
        throw new Error('Analysis failed');
      }
      
      const result = await response.json();
      setSolutionAiScore(result.aiScore);
    } catch (error) {
      console.error('Solution AI analysis error:', error);
      setSolutionAiScore(null);
    } finally {
      setIsAnalyzingSolution(false);
    }
  };

  // Helper functions for AI score formatting
  const getAIScoreColor = (score: number) => {
    if (score >= 80) return "text-red-600 font-bold";
    if (score >= 50) return "text-yellow-600 font-bold";
    if (score >= 20) return "text-blue-600 font-bold";
    return "text-green-600 font-bold";
  };

  const getAIScoreText = (score: number) => {
    return `${score}% AI / ${100 - score}% HUMAN`;
  };

  // Word count calculation helper
  const getWordCount = (text: string): number => {
    if (!text.trim()) return 0;
    return text.trim().split(/\s+/).length;
  };

  const handleNewAssignment = () => {
    setInputText("");
    setCurrentResult(null);
    setSolutionAiScore(null);
    toast({
      title: "New assignment started",
      description: "All fields have been cleared",
    });
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50">
      <header className="bg-white border-b border-slate-200 shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-slate-900">Homework Assistant</h1>
              <p className="text-sm text-slate-600 mt-1">AI-powered assignment solver</p>
            </div>
            <div className="flex items-center space-x-3">
              <Button
                onClick={handleNewAssignment}
                variant="outline"
                className="border-emerald-200 text-emerald-700 hover:bg-emerald-50"
              >
                <FileText className="w-4 h-4 mr-2" />
                New Assignment
              </Button>
              <Select value={selectedProvider} onValueChange={setSelectedProvider}>
                <SelectTrigger className="w-48">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="anthropic">Claude (Anthropic)</SelectItem>
                  <SelectItem value="openai">GPT (OpenAI)</SelectItem>
                  <SelectItem value="perplexity">Perplexity</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          
          <Card className="flex flex-col">
            <div className="p-6 space-y-6">
              <h2 className="text-lg font-semibold text-slate-900">Assignment Details</h2>
              
              <div>
                <label className="text-sm font-medium text-slate-700 mb-2 block">
                  Enter Your Question or Problem ({getWordCount(inputText)} words)
                </label>
                <Textarea
                  value={inputText}
                  onChange={(e) => setInputText(e.target.value)}
                  placeholder="Type your homework question here..."
                  className="min-h-[200px] resize-none"
                  onKeyDown={(e) => {
                    if (e.key === 'Enter' && !e.shiftKey) {
                      e.preventDefault();
                      handleProcessText();
                    }
                  }}
                />
              </div>

              <Button
                onClick={handleProcessText}
                disabled={textMutation.isPending || !inputText.trim()}
                className="w-full bg-blue-600 hover:bg-blue-700 text-white"
              >
                {textMutation.isPending ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    Processing...
                  </>
                ) : (
                  <>
                    <Send className="w-4 h-4 mr-2" />
                    Solve Assignment
                  </>
                )}
              </Button>
            </div>
          </Card>

          <Card className="flex flex-col">
            <div className="p-6">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-lg font-semibold text-slate-900">
                  Solution {currentResult && `(${getWordCount(currentResult.llmResponse)} words)`}
                </h2>
                {currentResult && (
                  <Button
                    onClick={handlePrint}
                    variant="outline"
                    size="sm"
                    className="border-blue-200 text-blue-700 hover:bg-blue-50"
                  >
                    <Printer className="w-4 h-4 mr-2" />
                    Print/Save PDF
                  </Button>
                )}
              </div>
              
              {currentResult ? (
                <div className="math-content prose max-w-none">
                  <div dangerouslySetInnerHTML={{ __html: currentResult.llmResponse }} />
                </div>
              ) : (
                <div className="text-center text-slate-500 py-12">
                  <div className="w-16 h-16 mx-auto mb-4 rounded-full bg-slate-100 flex items-center justify-center">
                    <FileText className="w-8 h-8 text-slate-400" />
                  </div>
                  <p>Enter your assignment above and click "Solve Assignment" to get started</p>
                </div>
              )}
            </div>
          </Card>
        </div>
      </div>
    </div>
  );
}